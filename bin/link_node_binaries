#!/usr/bin/env python

import os
import json
from distutils.version import StrictVersion
from distutils.spawn import find_executable

working_dir = os.path.dirname(os.path.realpath(__file__))
project_dir = os.path.abspath(os.path.join(working_dir, os.pardir))
package_json = project_dir + '/package.json'
path = os.environ['PATH']

bindir = os.environ['HOME'] + '/bin'
if not os.path.exists(bindir):
    os.makedirs(bindir)

with open(package_json) as data_file:
    data = json.load(data_file)

engines = data['engines']
required_node_version = engines['node']
required_npm_version = engines['npm']

node_version = os.popen('node --version 2>/dev/null').read().rstrip()
node_version = node_version.replace('v', '')

if (len(node_version) > 0 and
        StrictVersion(node_version) == StrictVersion(required_node_version)):
    node_exe = find_executable('node', path)
    print 'Using %s version %s' % (node_exe, node_version)
else:
    link_source = '/pkg/packages/node-v%s/bin/node' % required_node_version
    link_target = bindir + '/node'
    if os.path.isfile(link_source):
        if os.path.isfile(link_target):
            os.remove(link_target)
        print 'Linking %s' % link_source
        os.symlink(link_source, link_target)
    else:
        print 'Failed to find node version %s' % required_node_version
        exit(1)

npm_version = os.popen('npm --version 2>/dev/null').read().rstrip()

if (len(npm_version) > 0 and
        StrictVersion(npm_version) == StrictVersion(required_npm_version)):
    npm_exe = find_executable('npm', path)
    print 'Using %s version %s' % (npm_exe, npm_version)
else:
    link_source = '/opt/solfo-npm-%s/bin/npm' % required_npm_version
    link_target = bindir + '/npm'
    if os.path.isfile(link_source):
        if os.path.isfile(link_target):
            os.remove(link_target)
        print 'Linking %s' % link_source
        os.symlink(link_source, link_target)
    else:
        print 'Failed to find npm version %s' % required_npm_version
        exit(1)
